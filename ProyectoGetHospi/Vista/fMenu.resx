<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>